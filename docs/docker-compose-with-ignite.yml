version: '2'

services:
  # this is our kafka cluster.
  kafka-cluster:
    image: landoop/fast-data-dev:cp3.3.0
    environment:
      ADV_HOST: 127.0.0.1         # Change to 192.168.99.100 if using Docker Toolbox
      # ADV_HOST: 192.168.99.100
      RUNTESTS: 0                 # Disable Running tests so the cluster starts faster
    ports:
      - 2181:2181                 # Zookeeper
      - 3030:3030                 # Landoop UI
      - 8081-8083:8081-8083       # REST Proxy, Schema Registry, Kafka Connect ports
      - 9581-9585:9581-9585       # JMX Ports
      - 9092:9092                 # Kafka Broker
    volumes:
      - /Users/yromaykin/Desktop/GridU/StreamingProcess/data:/capstone/data
      - /Users/yromaykin/Desktop/GridU/StreamingProcess/scripts:/capstone/scripts
    # command: connect-standalone /capstone/scripts/connect-standalone.properties /capstone/scripts/connect-file-source.properties

  # ignite:
  #   image: apacheignite/ignite:2.7.0
  #   # depends_on:
  #   #   - kafka-cluster
  #   environment:
  #     - IGNITE_QUIET=false
  #     - "JAVA_OPTS=-Xms3g -Xmx3g"
  #   ports:
  #     - 11211:11211
  #     - 47100:47100
  #     - 47500:47500
  #     - 49112:49112
  #     - 10800:10800


  cassandra-1:
    # hostname: cassandra-1
    image: cassandra:3.11.4
    # command: /bin/bash -c "sleep 1 && echo ' -- Pausing to let system catch up ... -->' && /docker-entrypoint.sh cassandra -f"
    ports:
      - "10042:10042"   # Native transport
      - "7199:7199"   # JMX
      - "9160:9160"   # Thrift clients
      - "9042:9042"
      
  # volumes: # uncomment if you desire mounts, also uncomment cluster.sh
  #   - ./data/cassandra-1:/var/lib/cassandra:rw
      
  # we will use elasticsearch as one of our sinks.
  # This configuration allows you to start elasticsearch
  # elasticsearch:
  #   image: itzg/elasticsearch:2.4.3
  #   environment:
  #     PLUGINS: appbaseio/dejavu
  #     OPTS: -Dindex.number_of_shards=1 -Dindex.number_of_replicas=0
  #   ports:
  #     - "9200:9200"

  # we will use postgres as one of our sinks.
  # This configuration allows you to start postgres
  # postgres:
  #   image: postgres:9.5-alpine
  #   environment:
  #     POSTGRES_USER: postgres     # define credentials
  #     POSTGRES_PASSWORD: postgres # define credentials
  #     POSTGRES_DB: postgres       # define database
  #   ports:
  #     - 5432:5432                 # Postgres port


  web-console:
    image: apacheignite/web-console-standalone
    ports:
      # Proxy 3001 port from docker container to 3001 port host machine. (HOST_PORT:DOCKER_PORT)
      - "3001:3001"
      - "80:80"
    volumes:
    # External volume for persisting data. (HOST_PATH:CONTAINER_PATH).
    - /Users/yromaykin/Desktop/GridU/StreamingProcess/data/mongo:/data/db
    expose:
      - "8080"
      - "3001"
